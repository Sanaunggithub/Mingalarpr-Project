from tkinter import *
from tkinter import ttk
from PIL import Image, ImageTk
import tkinter.messagebox
from orderadd import Add
from menuitem import Dish, Beverage, MenuItem


order_window = None
selected_item = None


class DishNotSelectedError(Exception):
    def __init__(self, message="Please select a dish first."):
        self.message = message
        super().__init__(self.message)


def main():
    window = Tk()
    window.title("Mingalarpr")
    window.geometry("800x500") 
    window.resizable(FALSE,FALSE)

    def add_to_order():
        global order_window, selected_item

        try:
            if selected_item is None:
                raise DishNotSelectedError()

            if order_window is None or not order_window.window.winfo_exists():
                order_window = Add(window)
            order_window.add_item(selected_item.name, selected_item.price)

        except DishNotSelectedError as e:
            tkinter.messagebox.showwarning("Warning", e.message)

    def remove_item_from_order():
        global selected_item
        if selected_item:
            if not order_window:
                print("No order window open to remove items from.")
            else:
                order_window.remove_item(selected_item.name)
        else:
            print("No dish selected to remove.")

    def display_dish(menu_item: MenuItem):
        global selected_item

        # Update selected dish or beverage
        selected_item = menu_item

        # Display the dish image
        dish_image = Image.open(menu_item.image_path).resize((400, 300))
        dish_tk = ImageTk.PhotoImage(dish_image)
        image_label.config(image=dish_tk)
        image_label.image = dish_tk

        # Update the price label
        price_label.config(text=f"Price: ${menu_item.price}")
        price_label.grid()  # Show the price label

    # Style configuration
    s = ttk.Style()
    s.configure('mainframe.TFrame', background='#352e29')
    s.configure('menuframe.TFrame', background=' #AB886D')
    s.configure('displayframe.TFrame', background='#352e29')
    s.configure('beverage.TFrame', background='#AB886D', font='Courier')
    s.configure('display.TButton', background='#AB886D', foreground='black', padding=5, font='Courier', relief=RAISED)

    # Frames
    mainframe = ttk.Frame(window, style='mainframe.TFrame')
    mainframe.grid(row=0, column=0, sticky="NSEW", padx=10, pady=5)

    menuframe = ttk.Frame(mainframe, style='menuframe.TFrame')
    menuframe.grid(row=1, column=0, padx=3, pady=3, sticky='NESW')

    beverageframe = ttk.Frame(mainframe, style='beverage.TFrame')
    beverageframe.grid(row=1, column=1, padx=3, pady=3, sticky='NESW')

    displayframe = ttk.Frame(mainframe, style='displayframe.TFrame')
    displayframe.grid(row=1, column=2, padx=3, pady=3, sticky='EW')

    # Add, Remove buttons
    add_button = ttk.Button(displayframe, text="Add to order", command=add_to_order)
    add_button.grid(row=3, column=0, sticky='W', padx=5, pady=3)
    remove_button = ttk.Button(displayframe, text="Remove", command=remove_item_from_order)
    remove_button.grid(row=3, column=0, sticky='E', padx=5, pady=3)

    # Heading
    ttk.Label(mainframe, text="Mingalarpr", background='#352e29', foreground='#f5e8c7', anchor='center', font=("Times", 20)).grid(row=0, column=1, sticky="EW")

    # Menu title
    ttk.Label(menuframe, text="Menu", background='black', foreground='#f5e8c7', anchor='center', font=("Courier",13)).grid(row=0, column=0, sticky="EW")

    #beverage title
    ttk.Label(beverageframe, text="Beverage & Dessert",background='black', foreground='#f5e8c7',anchor='center',font=("Courier",13)).grid(row=0,column=0,sticky="EW")

    #order here title
    ttk.Label(displayframe, text= "ORDER HERE!", background='#352e29', foreground='#f5e8c7',anchor='center',font=('Courier',15,'italic')).grid(row=0,column=0)

    # Default image
    try:
        restaurant_origin = Image.open('menu/restauarant.jpg').resize((400, 300))
        restauranttk = ImageTk.PhotoImage(restaurant_origin)
        image_label = Label(displayframe, image=restauranttk, anchor='center')
        image_label.grid(row=1, column=0, sticky='NESW')
        image_label.image = restauranttk
        
    except Exception as e:
        tkinter.messagebox.showerror("Error", f"Failed to load restaurant image: {e}")

    # Menu items
    mohinga = Dish("Mohinga", 50, 'menu/mohinga.jpg')
    mohinga_button = ttk.Button(menuframe, text="Mohinga", style="display.TButton", command=lambda: display_dish(mohinga))
    mohinga_button.grid(row=1, column=0, sticky='EW')

    mhoteti = Dish("Mhote-ti", 40, 'menu/mhoteti.gif')
    mhoteti_button = ttk.Button(menuframe, text="Mhote-ti", style="display.TButton", command=lambda: display_dish(mhoteti))
    mhoteti_button.grid(row=2, column=0, sticky='EW')

    shannoodle = Dish("Shan-noodle", 50, 'menu/shannoodle.gif')
    shannoodle_button = ttk.Button(menuframe, text="Shan-noodle", style="display.TButton", command=lambda: display_dish(shannoodle))
    shannoodle_button.grid(row=3, column=0, sticky='EW')

    latphatthoke = Dish("Lat-phat-thoke", 48, 'menu/latphat.jpg')
    latphatthoke_button = ttk.Button(menuframe, text="Lat-phat-thoke", style="display.TButton", command=lambda: display_dish(latphatthoke))
    latphatthoke_button.grid(row=4, column=0, sticky='EW')

    nangyithoke = Dish("Nan-gyi-thoke", 50, 'menu/nangyithoke.gif')
    nangyithoke_button = ttk.Button(menuframe, text="Nan-gyi-thoke", style="display.TButton", command=lambda: display_dish(nangyithoke))
    nangyithoke_button.grid(row=5, column=0, sticky='EW')

    ohnno = Dish("Ohnno", 50, 'menu/ohnno.gif')
    ohnno_button = ttk.Button(menuframe, text="Ohnno", style="display.TButton", command=lambda: display_dish(ohnno))
    ohnno_button.grid(row=6, column=0, sticky='EW')

    shanhtamin = Dish("Shan-Hta-Min", 50, 'menu/shanhtamin.gif')
    shanhtamin_button = ttk.Button(menuframe, text="Shan-Hta-Min", style="display.TButton", command=lambda: display_dish(shanhtamin))
    shanhtamin_button.grid(row=7, column=0, sticky='EW')

    tofuthoke = Dish("Tofu-thoke", 45, 'menu/tofuthoke.gif')
    tofuthoke_button = ttk.Button(menuframe, text="Tofu-thoke", style="display.TButton", command=lambda: display_dish(tofuthoke))
    tofuthoke_button.grid(row=8, column=0, sticky='EW')

    #swap with kat kyay kite
    katkyikaik = Dish("Kat-kyi-kaik", 50, 'menu/kat-kyi-kaik2.jpg')
    katkyikaik_button = ttk.Button(menuframe, text="Kat-kyi-kaik", style="display.TButton", command=lambda: display_dish(katkyikaik))
    katkyikaik_button.grid(row=9, column=0, sticky='EW')

    coconutrice = Dish("Coconut rice", 50, 'menu/coconutrice.gif')
    coconutrice_button = ttk.Button(menuframe, text="Coconut rice", style="display.TButton", command=lambda: display_dish(coconutrice))
    coconutrice_button.grid(row=10, column=0, sticky='EW')

    tofunway = Dish("Tofu-nway", 48, 'menu/tofunway.gif')
    tofunway_button = ttk.Button(menuframe, text="Tofu-nway", style="display.TButton", command=lambda: display_dish(tofunway))
    tofunway_button.grid(row=11, column=0, sticky='EW')

    myeeshay = Dish("Myee-shay", 49, 'menu/myeeshay.gif')
    myeeshay_button = ttk.Button(menuframe, text="Myee-shay", style="display.TButton", command=lambda: display_dish(myeeshay))
    myeeshay_button.grid(row=12, column=0, sticky='EW')

    # Beverage Items

    shweyinaye = Beverage("Shwe-yin-aye", 48, 'menu/shweyinaye.jpg')
    shweyinaye_button = ttk.Button(beverageframe, text="Shwe-yin-aye", style="display.TButton", command=lambda: display_dish(shweyinaye))
    shweyinaye_button.grid(row=1, column=0, sticky='EW')

    montloneyaypaw = Beverage("Mote-lone-yay-paw", 42, 'menu/montloneyaypaw.jpg')
    montloneyaypaw_button = ttk.Button(beverageframe, text="Mote-lone-yay-paw", style="display.TButton", command=lambda: display_dish(montloneyaypaw))
    montloneyaypaw_button.grid(row=2, column=0, sticky='EW')

    tagu = Beverage("Tagu", 38, 'menu/tagu.gif')
    tagu_button = ttk.Button(beverageframe, text="Tagu", style="display.TButton", command=lambda: display_dish(tagu))
    tagu_button.grid(row=3, column=0, sticky='EW')

    shwekyi = Beverage("Shwe-kyi", 45, 'menu/shwekyi.jpg')
    shwekyi_button = ttk.Button(beverageframe, text="Shwe-kyi", style="display.TButton", command=lambda: display_dish(shwekyi))
    shwekyi_button.grid(row=4, column=0, sticky='EW')

    htoemont = Beverage("Htoe-mont", 46, 'menu/htoemont.jpg')
    htoemont_button = ttk.Button(beverageframe, text="Htoe-mont", style="display.TButton", command=lambda: display_dish(htoemont))
    htoemont_button.grid(row=5, column=0, sticky='EW')

    kyaukkyaw = Beverage("Kyauk-kyaw", 48, 'menu/kyautkyaw.jpg')
    kyaukkyaw_button = ttk.Button(beverageframe, text="Kyauk-kyaw", style="display.TButton", command=lambda: display_dish(kyaukkyaw))
    kyaukkyaw_button.grid(row=6, column=0, sticky='EW')

    tea = Beverage("Tea", 40, 'menu/tea.jpg')
    tea_button = ttk.Button(beverageframe, text="Tea", style="display.TButton", command=lambda: display_dish(tea))
    tea_button.grid(row=7, column=0, sticky='EW')

    phaludar = Beverage("Pha-lu-dar", 50, 'menu/phaludar.jpeg')
    phaludar_button = ttk.Button(beverageframe, text="Pha-lu-dar", style="display.TButton", command=lambda: display_dish(phaludar))
    phaludar_button.grid(row=8, column=0, sticky='EW')

    domino = Beverage("Domino", 50, 'menu/domino.jpg')
    domino_button = ttk.Button(beverageframe, text="Domino", style="display.TButton", command=lambda: display_dish(domino))
    domino_button.grid(row=9, column=0, sticky='EW')

    kyanyay = Beverage("Kyan-yay", 35, 'menu/kyanyay.gif')
    kyanyay_button = ttk.Button(beverageframe, text="Kyan-yay", style="display.TButton", command=lambda: display_dish(kyanyay))
    kyanyay_button.grid(row=10, column=0, sticky='EW')

    motelinmayar = Beverage("Mote-lin-mayar", 50, 'menu/motelinmayar.jpg')
    motelinmayar_button = ttk.Button(beverageframe, text="Mote-lin-mayar", style="display.TButton", command=lambda: display_dish(motelinmayar))
    motelinmayar_button.grid(row=11, column=0, sticky='EW')

    ekyarkway = Beverage("E-kyar-kway", 30, 'menu/ekyarkway.jpg')
    ekyarkway_button = ttk.Button(beverageframe, text="E-kyar-kway", style="display.TButton", command=lambda: display_dish(ekyarkway))
    ekyarkway_button.grid(row=12, column=0, sticky='EW')                                


    #mainframe configuration
    window.rowconfigure(0,weight=1)
    window.columnconfigure(0,weight=1)

    mainframe.rowconfigure((0,1,2),weight=4)
    mainframe.columnconfigure((0,1,2),weight=4)

    #beverage configuration
    beverageframe.columnconfigure(0,weight=1)
    beverageframe.rowconfigure((0,1,2,3,4,5,6,7,8,9,10,11,12),weight=1)
    
    #menuframe configuration
    menuframe.columnconfigure(0,weight=1)
    menuframe.rowconfigure((1,2,3,4,5,6,7,8,9,10,11,12),weight=1)

    #display configuration
    displayframe.columnconfigure(0,weight=1)
    displayframe.rowconfigure((0,1,2),weight=1)

    # Create the price label and hide it initially
    price_label = Label(displayframe, text="Price: ", anchor='center', font=("Courier", 12), background='#f5e8c7')

    # Initially hide the label
    price_label.grid(row=2, column=0, sticky='EW')
    price_label.grid_remove()  # This hides the label initially
    
    window.mainloop()

if __name__ == "__main__":
    main()

from abc import ABC,abstractmethod

class DishNotSelectedError(Exception):
    def __init__(self, message="Please select a dish before adding to the order."):
        self.message = message
        super().__init__(self.message)


class MenuItem(ABC):
    def __init__(self, name, price, image_path):
        self.name = name
        self.price = price
        self.image_path = image_path
        
    @abstractmethod
    def display(self):
        pass


class Dish(MenuItem):
    def __init__(self, name, price, image_path):
        super().__init__(name, price, image_path)

    def display(self):
        return self.name, self.image_path, self.price


class Beverage(MenuItem):
    def __init__(self, name, price, image_path):
        super().__init__(name, price, image_path)

    def display(self):
        return self.name, self.image_path, self.price

from tkinter import Toplevel, ttk
import tkinter.messagebox
from tkinter import *
from orderconfirm import*

class Add:
    def __init__(self, window):
        s = ttk.Style()
        s.configure('Buttons.TFrame', background='#493628')
        s.configure('label.TFrame', background='#493628')

        self.window = Toplevel(window, background='#493628')
        self.window.title("Order")
        self.window.resizable(False, False)

        self.items = []
        self.prices_list = []
        self.item_count = {}
        self.total_price = 0

        self.prices = {
            "mohinga": 50, "shan-noodle": 50, "mhote-ti": 40,
            "lat-phat-thoke": 48, "nan-gyi-thoke": 50, "ohnno": 50,
            "shan-hta-min": 50, "tofu-thoke": 45, "coconut rice": 50,
            "tofu-nway": 48, "myee-shay": 49, "kat-kyi-kaik": 50,
            "shwe-yin-aye": 48, "mote-lone-yaypaw": 42, "tagu": 38,
            "shwe-kyi": 45, "htoe-mont": 46, "kyauk-kyaw": 48,
            "tea": 40, "pha-lu-dar": 50, "domino": 50,
            "kyan-yay": 35, "mote-lin-mayar": 50, "e-kyar-kway": 30
        }

        # Configure main grid layout with row and column padding
        self.window.grid_rowconfigure(0, weight=0, minsize=50)
        self.window.grid_rowconfigure(1, weight=0)
        self.window.grid_rowconfigure(2, weight=1)
        self.window.grid_rowconfigure(3, weight=0)
        self.window.grid_rowconfigure(4, weight=0)

        self.window.grid_columnconfigure(0, weight=1, minsize=150)
        self.window.grid_columnconfigure(1, weight=1, minsize=150)

        # Order Page Title
        ttk.Label(self.window, text="Order Page", background='#493628', foreground='#f5e8c7', anchor='center', font=("Courier", 20)).grid(row=0, column=0, columnspan=2, sticky="EW")

        # Headers for Items and Price with padding
        ttk.Label(self.window, text="Items", background='black', foreground='#f5e8c7', font=("Courier", 12), anchor='center').grid(row=1, column=0, sticky='EW', padx=10, pady=(10, 5))
        ttk.Label(self.window, text="Price", background='black', foreground='#f5e8c7', font=("Courier", 12), anchor='center').grid(row=1, column=1, sticky='EW', padx=10, pady=(10, 5))

        # Frames for items and prices
        self.items_frame = ttk.Frame(self.window, style="label.TFrame")
        self.items_frame.grid(row=2, column=0, sticky='NSEW', padx=(10, 5), pady=(5, 10))  # Padding to separate frames

        self.prices_frame = ttk.Frame(self.window, style="label.TFrame")
        self.prices_frame.grid(row=2, column=1, sticky='NESW', padx=(5, 10), pady=(5, 10))

        # Total price label with padding
        self.total_label = ttk.Label(self.window, text=f"Total: ${self.total_price}", background='black', foreground='#f5e8c7', font=("Courier", 12),anchor=CENTER)
        self.total_label.grid(row=3, column=0,sticky='EW', padx=10, pady=(10, 5))

        # Buttons frame
        buttons = ttk.Frame(self.window, style='Buttons.TFrame')
        buttons.grid(row=4, column=0, columnspan=2, sticky='EW', padx=10, pady=(10, 15))

        # Configure the buttons frame to allow space between the buttons
        buttons.columnconfigure(0, weight=1)
        buttons.columnconfigure(1, weight=1)
        buttons.columnconfigure(2, weight=1)

        # Place the "Order" and "Cancel" buttons in the first and last columns
        ttk.Button(buttons, text="Order", command=self.confirm_order).grid(row=0, column=0, padx=10, pady=15, sticky="W")
        ttk.Button(buttons, text="Cancel", command=self.cancel_order).grid(row=0, column=2, padx=10, pady=15, sticky="W")


    def add_item(self, item_name, price):
        item_name = item_name.lower()
        if item_name in self.item_count:
            self.item_count[item_name] += 1
        else:
            self.items.append(item_name)
            self.prices_list.append(price)
            self.item_count[item_name] = 1

        self.total_price += price
        self.update_order()

    def remove_item(self, item_name):
        item_name = item_name.lower()
        if item_name in self.item_count:
            if self.item_count[item_name] > 1:
                self.item_count[item_name] -= 1
                self.total_price -= self.prices[item_name]
            else:
                index = self.items.index(item_name)
                price_to_remove = self.prices_list.pop(index)
                self.items.pop(index)
                self.total_price -= price_to_remove
                del self.item_count[item_name]

            self.update_order()
        else:
            tkinter.messagebox.showwarning("Warning", f"Item '{item_name}' is not in the order.")

    def update_order(self):
        for widget in self.items_frame.winfo_children():
            widget.destroy()
        for widget in self.prices_frame.winfo_children():
            widget.destroy()

        for i, item in enumerate(self.items):
            quantity = self.item_count[item]
            ttk.Label(self.items_frame, text=f"{item} x{quantity}",background='#493628', foreground='#f5e8c7', font=("Courier", 12), padding=(5, 5)).grid(row=i, column=0, sticky='EW', padx=5, pady=(5, 5))
            ttk.Label(self.prices_frame, text=f"${self.prices_list[i] * quantity}", background='#493628', foreground='#f5e8c7', font=("Courier", 12), padding=(5, 5)).grid(row=i, column=0, sticky='EW', padx=5, pady=(5, 5))

        self.total_label.config(text=f"Total: {self.total_price}")

    def confirm_order(self):
        OrderConfirm(self.window, self.items, self.prices_list, self.item_count, self.total_price)

    def cancel_order(self):
        self.window.destroy()

import random
import string
from tkinter import ttk, Toplevel
from datetime import datetime

class OrderConfirm:
    def __init__(self, window, items, prices_list, item_count, total_price):
        # Apply styling
        s = ttk.Style()
        s.configure('Toplevel', background='#352e29')
        s.configure('mainframe.TFrame', background='#352e29')
        s.configure('TLabel', background='#352e29', foreground='#f5e8c7', font=("Courier", 12))

        # Window Configuration
        self.window = Toplevel(window)
        self.window.title("Receipt")
        self.window.geometry("400x500")
        self.window.resizable(False, False)

        # Main Frame centered with padding
        mainframe = ttk.Frame(self.window, style='mainframe.TFrame', padding=(20, 20))
        mainframe.grid(row=0, column=0, sticky='NSEW')
        self.window.grid_rowconfigure(0, weight=1)
        self.window.grid_columnconfigure(0, weight=1)

        # Generate Order ID with random letters and numbers
        order_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))  # 8 characters

        # Current date and time for the order
        order_time = datetime.now().strftime('%I:%M %p')  # 12-hour format with AM/PM

        # Welcome and Receipt Header
        ttk.Label(mainframe, text="Welcome to Mingalarpr", font=("Times", 14, 'bold'), anchor='center').grid(row=0, column=0, columnspan=2, sticky='EW', pady=(5, 5))
        ttk.Label(mainframe, text="Receipt", font=("Times", 18, 'bold'), anchor='center').grid(row=1, column=0, columnspan=2, sticky='EW', pady=(5, 10))

        # Order ID and Date/Time
        ttk.Label(mainframe, text=f"Order ID: {order_id}", font=("Courier", 12)).grid(row=2, column=0, columnspan=2, sticky='EW', pady=(5, 5))
        ttk.Label(mainframe, text=f"Date: {datetime.today().strftime('%x')}  Time: {order_time}", font=("Courier", 12)).grid(row=3, column=0, columnspan=2, sticky='EW', pady=(5, 10))

        # Headers for Items and Price
        ttk.Label(mainframe, text="Items", font=("Courier", 12, 'bold')).grid(row=4, column=0, sticky='W', padx=(10, 60))
        ttk.Label(mainframe, text="Price", font=("Courier", 12, 'bold')).grid(row=4, column=1, sticky='E', padx=(30, 10))

        # Frames for items and prices
        items_frame = ttk.Frame(mainframe, style='mainframe.TFrame')
        items_frame.grid(row=5, column=0, sticky='NSEW', padx=(10, 5), pady=(5, 10))

        prices_frame = ttk.Frame(mainframe, style='mainframe.TFrame')
        prices_frame.grid(row=5, column=1, sticky='NSEW', padx=(5, 10), pady=(5, 10))

        # Display Items and Prices
        for i, item in enumerate(items):
            quantity = item_count[item]
            price = prices_list[i] * quantity
            ttk.Label(items_frame, text=f"{item} x{quantity}", background='#352e29', foreground='#f5e8c7', font=("Courier", 12)).grid(row=i, column=0, sticky='W', padx=5, pady=(5, 5))
            ttk.Label(prices_frame, text=f"${price:.2f}", background='#352e29', foreground='#f5e8c7', font=("Courier", 12)).grid(row=i, column=0, sticky='E', padx=5, pady=(5, 5))

        # Total Price
        ttk.Label(mainframe, text=f"Total: ${total_price:.2f}", font=("Courier", 14, 'bold')).grid(row=6, column=0, columnspan=2, sticky='EW', pady=(10, 5))

        # Thank You Message
        ttk.Label(mainframe, text="Thank You!!!", font=("Courier", 16, 'italic'),anchor='center').grid(row=7, column=0, columnspan=2, sticky='EW', pady=(15, 5))

        # Configure resizing within main frame to center content
        mainframe.grid_rowconfigure(0, weight=1)
        mainframe.grid_rowconfigure(7, weight=1)
        mainframe.grid_columnconfigure(0, weight=1)